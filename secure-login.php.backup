<?php
/**
 * Plugin Name: Secure Login
 * Description: Custom login URL with email OTP authentication system
 * Version: 1.0.0
 * Author: Your Name
 * License: GPL v2 or later
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Define plugin constants
define('SECURE_LOGIN_VERSION', '1.0.0');
define('SECURE_LOGIN_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('SECURE_LOGIN_PLUGIN_URL', plugin_dir_url(__FILE__));

class SecureLogin {
    
    private $options;
    private $custom_login_slug;
    
    public function __construct() {
        $this->options = get_option('secure_login_options', []);
        $this->custom_login_slug = isset($this->options['custom_login_slug']) ? $this->options['custom_login_slug'] : 'secure-access';
        
        add_action('init', [$this, 'init']);
        add_action('wp_loaded', [$this, 'wp_loaded']);
        add_action('admin_menu', [$this, 'add_admin_menu']);
        add_action('admin_init', [$this, 'admin_init']);
        
        // AJAX handlers
        add_action('wp_ajax_send_otp', [$this, 'handle_send_otp']);
        add_action('wp_ajax_nopriv_send_otp', [$this, 'handle_send_otp']);
        add_action('wp_ajax_verify_otp', [$this, 'handle_verify_otp']);
        add_action('wp_ajax_nopriv_verify_otp', [$this, 'handle_verify_otp']);
        
        // Activation/Deactivation hooks
        register_activation_hook(__FILE__, [$this, 'activate']);
        register_deactivation_hook(__FILE__, [$this, 'deactivate']);
    }
    
    public function init() {
        // Add rewrite rules for custom login URL
        $this->add_rewrite_rules();
        
        // Block default login URLs if custom login is enabled
        if ($this->is_custom_login_enabled()) {
            add_action('wp_loaded', [$this, 'block_default_login'], 1);
        }
        
        // Handle custom login page
        add_action('template_redirect', [$this, 'handle_custom_login']);
        
        // Enqueue scripts
        add_action('wp_enqueue_scripts', [$this, 'enqueue_scripts']);
    }
    
    public function wp_loaded() {
        // Check if we need to flush rewrite rules
        if (get_option('secure_login_flush_rules')) {
            flush_rewrite_rules();
            delete_option('secure_login_flush_rules');
        }
    }
    
    private function add_rewrite_rules() {
        add_rewrite_rule(
            '^' . $this->custom_login_slug . '/?$',
            'index.php?secure_login=1',
            'top'
        );
        
        add_rewrite_tag('%secure_login%', '([^&]+)');
    }
    
    private function is_custom_login_enabled() {
        return isset($this->options['enable_custom_login']) && $this->options['enable_custom_login'];
    }
    
    private function is_otp_login_enabled() {
        return isset($this->options['enable_otp_login']) && $this->options['enable_otp_login'];
    }
    
    public function block_default_login() {
        global $pagenow;
        
        // Allow access with override key
        if (isset($_GET['override']) && $_GET['override'] === $this->get_override_key()) {
            return;
        }
        
        // Block wp-login.php and wp-admin access for non-logged-in users
        if ($pagenow === 'wp-login.php' || 
            (is_admin() && !is_user_logged_in() && !wp_doing_ajax())) {
            
            wp_redirect(home_url('/404'));
            exit;
        }
    }
    
    private function get_override_key() {
        return isset($this->options['override_key']) ? $this->options['override_key'] : wp_generate_password(12, false);
    }
    
    public function handle_custom_login() {
        if (get_query_var('secure_login')) {
            $this->display_login_page();
            exit;
        }
    }
    
    private function display_login_page() {
        // Handle form submissions
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            $this->process_login();
        }
        
        $login_type = isset($_GET['type']) ? $_GET['type'] : 'standard';
        
        include SECURE_LOGIN_PLUGIN_DIR . 'templates/login-page.php';
    }
    
    private function process_login() {
        if (!wp_verify_nonce($_POST['_wpnonce'], 'secure_login_nonce')) {
            wp_die('Security check failed');
        }
        
        $login_type = $_POST['login_type'];
        
        if ($login_type === 'standard') {
            $this->process_standard_login();
        } elseif ($login_type === 'otp_verify') {
            $this->process_otp_verification();
        }
    }
    
    private function process_standard_login() {
        $username = sanitize_user($_POST['username']);
        $password = $_POST['password'];
        $remember = isset($_POST['remember']);
        
        $user = wp_authenticate($username, $password);
        
        if (is_wp_error($user)) {
            wp_redirect(add_query_arg('login', 'failed', $this->get_custom_login_url()));
            exit;
        }
        
        wp_set_current_user($user->ID);
        wp_set_auth_cookie($user->ID, $remember);
        
        $redirect_to = isset($_POST['redirect_to']) ? $_POST['redirect_to'] : admin_url();
        wp_redirect($redirect_to);
        exit;
    }
    
    private function process_otp_verification() {
        $email = sanitize_email($_POST['email']);
        $otp_code = sanitize_text_field($_POST['otp_code']);
        
        if ($this->verify_otp($email, $otp_code)) {
            $user = get_user_by('email', $email);
            if ($user) {
                wp_set_current_user($user->ID);
                wp_set_auth_cookie($user->ID, false);
                
                $redirect_to = isset($_POST['redirect_to']) ? $_POST['redirect_to'] : admin_url();
                wp_redirect($redirect_to);
                exit;
            }
        }
        
        wp_redirect(add_query_arg(['type' => 'otp', 'error' => 'invalid_otp'], $this->get_custom_login_url()));
        exit;
    }
    
    public function handle_send_otp() {
        if (!wp_verify_nonce($_POST['nonce'], 'send_otp_nonce')) {
            wp_send_json_error('Security check failed');
        }
        
        $email = sanitize_email($_POST['email']);
        
        // Rate limiting
        if ($this->is_rate_limited($email)) {
            wp_send_json_error('Too many requests. Please wait before requesting another OTP.');
        }
        
        $user = get_user_by('email', $email);
        if (!$user) {
            wp_send_json_error('Email address not found.');
        }
        
        $otp_code = $this->generate_otp();
        $this->store_otp($email, $otp_code);
        
        if ($this->send_otp_email($email, $otp_code)) {
            wp_send_json_success('OTP sent to your email address.');
        } else {
            wp_send_json_error('Failed to send OTP. Please try again.');
        }
    }
    
    public function handle_verify_otp() {
        if (!wp_verify_nonce($_POST['nonce'], 'verify_otp_nonce')) {
            wp_send_json_error('Security check failed');
        }
        
        $email = sanitize_email($_POST['email']);
        $otp_code = sanitize_text_field($_POST['otp_code']);
        
        if ($this->verify_otp($email, $otp_code)) {
            wp_send_json_success('OTP verified successfully.');
        } else {
            wp_send_json_error('Invalid or expired OTP.');
        }
    }
    
    private function generate_otp() {
        return str_pad(mt_rand(0, 999999), 6, '0', STR_PAD_LEFT);
    }
    
    private function store_otp($email, $otp_code) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'secure_login_otp';
        $expires_at = date('Y-m-d H:i:s', strtotime('+10 minutes'));
        
        // Delete any existing OTP for this email
        $wpdb->delete($table_name, ['email' => $email]);
        
        // Insert new OTP
        $wpdb->insert(
            $table_name,
            [
                'email' => $email,
                'otp_code' => wp_hash($otp_code),
                'expires_at' => $expires_at,
                'created_at' => current_time('mysql')
            ]
        );
    }
    
    private function verify_otp($email, $otp_code) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'secure_login_otp';
        
        $stored_otp = $wpdb->get_row(
            $wpdb->prepare(
                "SELECT * FROM {$table_name} WHERE email = %s AND expires_at > %s ORDER BY created_at DESC LIMIT 1",
                $email,
                current_time('mysql')
            )
        );
        
        if (!$stored_otp) {
            return false;
        }
        
        $is_valid = wp_check_password($otp_code, $stored_otp->otp_code);
        
        if ($is_valid) {
            // Delete the used OTP
            $wpdb->delete($table_name, ['id' => $stored_otp->id]);
        }
        
        return $is_valid;
    }
    
    private function send_otp_email($email, $otp_code) {
        $subject = 'Your Login Code - ' . get_bloginfo('name');
        $message = "Your one-time login code is: {$otp_code}\n\n";
        $message .= "This code will expire in 10 minutes.\n\n";
        $message .= "If you didn't request this code, please ignore this email.";
        
        $headers = ['Content-Type: text/plain; charset=UTF-8'];
        
        return wp_mail($email, $subject, $message, $headers);
    }
    
    private function is_rate_limited($email) {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'secure_login_otp';
        
        $recent_count = $wpdb->get_var(
            $wpdb->prepare(
                "SELECT COUNT(*) FROM {$table_name} WHERE email = %s AND created_at > %s",
                $email,
                date('Y-m-d H:i:s', strtotime('-5 minutes'))
            )
        );
        
        return $recent_count >= 3;
    }
    
    private function get_custom_login_url() {
        return home_url('/' . $this->custom_login_slug . '/');
    }
    
    public function enqueue_scripts() {
        if (get_query_var('secure_login')) {
            wp_enqueue_script('jquery');
            wp_enqueue_script(
                'secure-login-js',
                SECURE_LOGIN_PLUGIN_URL . 'assets/secure-login.js',
                ['jquery'],
                SECURE_LOGIN_VERSION,
                true
            );
            
            wp_localize_script('secure-login-js', 'secureLogin', [
                'ajaxUrl' => admin_url('admin-ajax.php'),
                'sendOtpNonce' => wp_create_nonce('send_otp_nonce'),
                'verifyOtpNonce' => wp_create_nonce('verify_otp_nonce')
            ]);
            
            wp_enqueue_style(
                'secure-login-css',
                SECURE_LOGIN_PLUGIN_URL . 'assets/secure-login.css',
                [],
                SECURE_LOGIN_VERSION
            );
        }
    }
    
    // Admin functionality
    public function add_admin_menu() {
        add_options_page(
            'Secure Login Settings',
            'Secure Login',
            'manage_options',
            'secure-login',
            [$this, 'admin_page']
        );
    }
    
    public function admin_init() {
        register_setting('secure_login_settings', 'secure_login_options');
        
        add_settings_section(
            'secure_login_main',
            'Main Settings',
            null,
            'secure-login'
        );
        
        add_settings_field(
            'enable_custom_login',
            'Enable Custom Login URL',
            [$this, 'enable_custom_login_callback'],
            'secure-login',
            'secure_login_main'
        );
        
        add_settings_field(
            'custom_login_slug',
            'Custom Login Slug',
            [$this, 'custom_login_slug_callback'],
            'secure-login',
            'secure_login_main'
        );
        
        add_settings_field(
            'enable_otp_login',
            'Enable OTP Login',
            [$this, 'enable_otp_login_callback'],
            'secure-login',
            'secure_login_main'
        );
        
        add_settings_field(
            'override_key',
            'Override Key',
            [$this, 'override_key_callback'],
            'secure-login',
            'secure_login_main'
        );
    }
    
    public function admin_page() {
        include SECURE_LOGIN_PLUGIN_DIR . 'templates/admin-page.php';
    }
    
    public function enable_custom_login_callback() {
        $enabled = isset($this->options['enable_custom_login']) ? $this->options['enable_custom_login'] : false;
        echo '<input type="checkbox" name="secure_login_options[enable_custom_login]" value="1" ' . checked(1, $enabled, false) . ' />';
        echo '<p class="description">Block access to wp-login.php and redirect to custom URL</p>';
    }
    
    public function custom_login_slug_callback() {
        $slug = isset($this->options['custom_login_slug']) ? $this->options['custom_login_slug'] : 'secure-access';
        echo '<input type="text" name="secure_login_options[custom_login_slug]" value="' . esc_attr($slug) . '" />';
        echo '<p class="description">Custom slug for login URL (e.g., "secure-access" creates /secure-access/)</p>';
    }
    
    public function enable_otp_login_callback() {
        $enabled = isset($this->options['enable_otp_login']) ? $this->options['enable_otp_login'] : false;
        echo '<input type="checkbox" name="secure_login_options[enable_otp_login]" value="1" ' . checked(1, $enabled, false) . ' />';
        echo '<p class="description">Allow users to login using email OTP</p>';
    }
    
    public function override_key_callback() {
        $key = isset($this->options['override_key']) ? $this->options['override_key'] : '';
        if (empty($key)) {
            $key = wp_generate_password(12, false);
        }
        echo '<input type="text" name="secure_login_options[override_key]" value="' . esc_attr($key) . '" />';
        echo '<p class="description">Secret key to access original wp-login.php (add ?override=KEY to wp-login.php)</p>';
    }
    
    public function activate() {
        // Create OTP table
        $this->create_otp_table();
        
        // Set flag to flush rewrite rules
        update_option('secure_login_flush_rules', true);
        
        // Set default options
        $default_options = [
            'enable_custom_login' => false,
            'custom_login_slug' => 'secure-access',
            'enable_otp_login' => false,
            'override_key' => wp_generate_password(12, false)
        ];
        
        add_option('secure_login_options', $default_options);
    }
    
    public function deactivate() {
        // Flush rewrite rules
        flush_rewrite_rules();
    }
    
    private function create_otp_table() {
        global $wpdb;
        
        $table_name = $wpdb->prefix . 'secure_login_otp';
        
        $charset_collate = $wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE $table_name (
            id int(11) NOT NULL AUTO_INCREMENT,
            email varchar(255) NOT NULL,
            otp_code varchar(255) NOT NULL,
            expires_at datetime NOT NULL,
            created_at datetime NOT NULL,
            PRIMARY KEY (id),
            KEY email (email),
            KEY expires_at (expires_at)
        ) $charset_collate;";
        
        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        dbDelta($sql);
    }
}

// Initialize the plugin
new SecureLogin();
